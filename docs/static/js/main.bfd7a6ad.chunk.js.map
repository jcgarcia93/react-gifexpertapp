{"version":3,"sources":["components/AddCategory.tsx","helpers/getGifs.tsx","components/GifGridItem.tsx","components/GifGrid.tsx","hooks/useFetchGifs.tsx","GifExpertApp.tsx","index.tsx"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","a","category","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"wNAMaA,EAAc,SAAC,GAAgC,IAA7BC,EAA4B,EAA5BA,cAA4B,EAEnBC,mBAAS,IAFU,mBAEhDC,EAFgD,KAEpCC,EAFoC,KAkBvD,OACQ,sBAAMC,SAXO,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAACS,GAAD,OAAoBP,GAApB,mBAAmCO,OAClDN,EAAc,MAMd,SACA,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCLlBG,EAAO,uCAAG,uCAAAC,EAAA,6DAAQC,EAAR,EAAQA,SAErBC,EAFa,iDAEmCC,UAAUF,GAF7C,+DAGAG,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAACC,GACpB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVtB,kBAcZM,GAdY,4CAAH,sDCFPO,G,MAAc,SAAC,GAA4B,EAA1BJ,GAA2B,IAAvBC,EAAsB,EAAtBA,MAAOV,EAAe,EAAfA,IAErC,OACI,sBAAKc,UAAU,iDAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,YCACO,EAAU,SAAC,GAAyB,IAAxBlB,EAAuB,EAAvBA,SAAuB,ECIpB,SAAC,GAA0B,IAAxBA,EAAuB,EAAvBA,SAAuB,EAExBf,mBAAgB,CACtCqB,KAAM,GACNa,SAAS,IAJqC,mBAE3CC,EAF2C,KAEpCC,EAFoC,KAoBlD,OAbAC,qBAAW,WAEPxB,EAAS,CAACE,aACLuB,MAAM,SAAAC,GAECH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAI1B,CAAEnB,IAEEoB,EDtB2BK,CAAa,CAACzB,aAAlCY,EAF8B,EAEpCN,KAAca,EAFsB,EAEtBA,QAEtB,OACI,qCACA,6BAAMnB,IAEJmB,GAAW,2CAEb,qBAAKJ,UAAU,YAAf,SAEYH,EAAOJ,KAAK,SAACC,GACT,OACI,cAAC,EAAD,eAESA,GADCA,EAAIC,aEI3BgB,EAxBM,WAAO,IAAD,EAEazC,mBAAS,CAAC,cAFvB,mBAEhB0C,EAFgB,KAEJ3C,EAFI,KAIvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAAAR,GAAQ,OACpB,cAAC,EAAD,CAEAA,SAAWA,GADNA,Y,MCb7B4B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.bfd7a6ad.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\ninterface Props {\n    setCategories : React.Dispatch<React.SetStateAction<string[]>>\n}\n\nexport const AddCategory = ( { setCategories }: Props ) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n\n        if( inputValue.trim().length > 2 ){\n            setCategories( (cats: string[])=> [inputValue, ...cats ])\n            setInputValue(\"\")\n        }\n\n    }\n\n    return (\n            <form onSubmit={ handleSubmit }>\n            <input \n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n            </form>\n    )\n}","import { Img } from '../img'\n\ninterface Props {\n    category: string\n}\n\nexport const getGifs = async ({category} :  Props) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=XZlalKcryzdYjJc571a0UV7Xvojd3Xkj`\n    const resp = await fetch( url )\n    const { data } = await resp.json();\n\n    const gifs = data.map( (img: Img) => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    })\n    \n    return gifs;\n    \n}","import React from 'react'\nimport { Img } from '../img'\nimport '../animate.min.css'\n\nexport const GifGridItem = ( {id, title, url}: Img ) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn animate\">\n            <img src={ url } alt={ title } />\n            <p> { title } </p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\nimport { Img } from '../img'\n\ninterface Props {\n    category: string\n}\n\nexport const GifGrid = ({category} :  Props) => {\n\n    const { data: images, loading } = useFetchGifs({category})\n\n    return (\n        <>\n        <h3>{ category }</h3>\n\n        { loading && <p>Loading...</p> }\n\n        <div className=\"card-grid\">\n                {\n                    images.map( (img: Img) => {\n                        return (\n                            <GifGridItem \n                                key={ img.id }\n                                { ...img }\n                            />\n                        )\n                    })\n                }\n        </div>\n        </>\n    )\n}\n","import { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs'\nimport { Img } from '../img'\n\ninterface Props {\n    data: Img[]\n    loading: boolean\n}\n\ninterface cProps {\n    category: string\n}\n\nexport const useFetchGifs = ({ category }: cProps) => {\n    \n    const [state, setstate] = useState<Props>({\n        data: [],\n        loading: true\n    })\n\n    useEffect( () => {\n\n        getGifs( {category} )\n            .then( imgs => {\n\n                    setstate({\n                        data: imgs,\n                        loading: false\n                    })\n                })\n\n    }, [ category ])\n\n    return state; // { data; [], loading: true}\n}\n","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid'\n\nconst GifExpertApp = () => {\n    \n    const [categories, setCategories] = useState(['One Punch'])\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories }/>\n            <hr />\n\n            <ol>\n                { \n                    categories.map( category => \n                        <GifGrid \n                        key={category}\n                        category={ category }/>\n                    ) \n                }\n            </ol>\n        </>\n    )\n        \n}\n\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}